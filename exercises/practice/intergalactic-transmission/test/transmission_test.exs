defmodule TransmissionTest do
  use ExUnit.Case

  describe "calculate transmit sequences" do
    test "empty message" do
      assert Transmission.get_transmit_sequence(<<>>) == <<>>
    end

    @tag :pending
    test "0x00 is transmitted as 0x0000" do
      assert Transmission.get_transmit_sequence(<<0x00>>) == <<0x00, 0x00>>
    end

    @tag :pending
    test "0x02 is transmitted as 0x0300" do
      assert Transmission.get_transmit_sequence(<<0x02>>) == <<0x03, 0x00>>
    end

    @tag :pending
    test "0x06 is transmitted as 0x0600" do
      assert Transmission.get_transmit_sequence(<<0x06>>) == <<0x06, 0x00>>
    end

    @tag :pending
    test "0x05 is transmitted as 0x0581" do
      assert Transmission.get_transmit_sequence(<<0x05>>) == <<0x05, 0x81>>
    end

    @tag :pending
    test "0x29 is transmitted as 0x2881" do
      assert Transmission.get_transmit_sequence(<<0x29>>) == <<0x28, 0x81>>
    end

    @tag :pending
    test "0xc001c0de is transmitted as 0xc000711be1" do
      assert Transmission.get_transmit_sequence(<<0xC0, 0x01, 0xC0, 0xDE>>) ==
               <<0xC0, 0x00, 0x71, 0x1B, 0xE1>>
    end

    @tag :pending
    test "six byte message" do
      assert Transmission.get_transmit_sequence(<<0x47, 0x72, 0x65, 0x61, 0x74, 0x21>>) ==
               <<0x47, 0xB8, 0x99, 0xAC, 0x17, 0xA0, 0x84>>
    end

    @tag :pending
    test "seven byte message" do
      assert Transmission.get_transmit_sequence(<<0x47, 0x72, 0x65, 0x61, 0x74, 0x31, 0x21>>) ==
               <<0x47, 0xB8, 0x99, 0xAC, 0x17, 0xA0, 0xC5, 0x42>>
    end

    @tag :pending
    test "eight byte message" do
      assert Transmission.get_transmit_sequence(
               <<0xC0, 0x01, 0x13, 0x37, 0xC0, 0xDE, 0x21, 0x21>>
             ) ==
               <<0xC0, 0x00, 0x44, 0x66, 0x7D, 0x06, 0x78, 0x42, 0x21, 0x81>>
    end

    @tag :pending
    test "twenty byte message" do
      assert Transmission.get_transmit_sequence(
               <<0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x6D, 0x20, 0x69, 0x73, 0x20, 0x61,
                 0x77, 0x65, 0x73, 0x6F, 0x6D, 0x65, 0x21>>
             ) ==
               <<0x44, 0xBD, 0x18, 0xAF, 0x27, 0x1B, 0xA5, 0xE7, 0x6C, 0x90, 0x1B, 0x2E, 0x33,
                 0x03, 0x84, 0xEE, 0x65, 0xB8, 0xDB, 0xED, 0xD7, 0x28, 0x84>>
    end
  end

  describe "decode received messages" do
    @tag :pending
    test "empty message" do
      assert Transmission.decode_message(<<>>) == {:ok, <<>>}
    end

    @tag :pending
    test "zero message" do
      assert Transmission.decode_message(<<0x00, 0x00>>) == {:ok, <<0x00>>}
    end

    @tag :pending
    test "0x0300 is decoded to 0x02" do
      assert Transmission.decode_message(<<0x03, 0x00>>) == {:ok, <<0x02>>}
    end

    @tag :pending
    test "0x0581 is decoded to 0x05" do
      assert Transmission.decode_message(<<0x05, 0x81>>) == {:ok, <<0x05>>}
    end

    @tag :pending
    test "0x2881 is decoded to 0x29" do
      assert Transmission.decode_message(<<0x28, 0x81>>) == {:ok, <<0x29>>}
    end

    @tag :pending
    test "first byte has wrong parity" do
      assert Transmission.decode_message(<<0x07, 0x00>>) == {:error, "wrong parity"}
    end

    @tag :pending
    test "second byte has wrong parity" do
      assert Transmission.decode_message(<<0x03, 0x68>>) == {:error, "wrong parity"}
    end

    @tag :pending
    test "0xcf4b00 is decoded to 0xce94" do
      assert Transmission.decode_message(<<0xCF, 0x4B, 0x00>>) == {:ok, <<0xCE, 0x94>>}
    end

    @tag :pending
    test "0xe2566500 is decoded to 0xe2ad90" do
      assert Transmission.decode_message(<<0xE2, 0x56, 0x65, 0x00>>) ==
               {:ok, <<0xE2, 0xAD, 0x90>>}
    end

    @tag :pending
    test "six byte message" do
      assert Transmission.decode_message(<<0x47, 0xB8, 0x99, 0xAC, 0x17, 0xA0, 0x84>>) ==
               {:ok, <<0x47, 0x72, 0x65, 0x61, 0x74, 0x21>>}
    end

    @tag :pending
    test "seven byte message" do
      assert Transmission.decode_message(<<0x47, 0xB8, 0x99, 0xAC, 0x17, 0xA0, 0xC5, 0x42>>) ==
               {:ok, <<0x47, 0x72, 0x65, 0x61, 0x74, 0x31, 0x21>>}
    end

    @tag :pending
    test "last byte has wrong parity" do
      assert Transmission.decode_message(<<0x47, 0xB8, 0x99, 0xAC, 0x17, 0xA0, 0xC5, 0x43>>) ==
               {:error, "wrong parity"}
    end

    @tag :pending
    test "eigth byte message" do
      assert Transmission.decode_message(
               <<0xC0, 0x00, 0x44, 0x66, 0x7D, 0x06, 0x78, 0x42, 0x21, 0x81>>
             ) == {:ok, <<0xC0, 0x01, 0x13, 0x37, 0xC0, 0xDE, 0x21, 0x21>>}
    end

    @tag :pending
    test "twenty byte message" do
      assert Transmission.decode_message(
               <<0x44, 0xBD, 0x18, 0xAF, 0x27, 0x1B, 0xA5, 0xE7, 0x6C, 0x90, 0x1B, 0x2E, 0x33,
                 0x03, 0x84, 0xEE, 0x65, 0xB8, 0xDB, 0xED, 0xD7, 0x28, 0x84>>
             ) ==
               {:ok,
                <<0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x6D, 0x20, 0x69, 0x73, 0x20, 0x61,
                  0x77, 0x65, 0x73, 0x6F, 0x6D, 0x65, 0x21>>}
    end

    @tag :pending
    test "wrong parity on 16th byte" do
      assert Transmission.decode_message(
               <<0x44, 0xBD, 0x18, 0xAF, 0x27, 0x1B, 0xA5, 0xE7, 0x6C, 0x90, 0x1B, 0x2E, 0x33,
                 0x03, 0x84, 0xEF, 0x65, 0xB8, 0xDB, 0xED, 0xD7, 0x28, 0x84>>
             ) == {:error, "wrong parity"}
    end
  end
end
